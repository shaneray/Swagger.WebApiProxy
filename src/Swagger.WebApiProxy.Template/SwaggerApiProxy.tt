<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Serialization" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(myLibFolder)\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="Newtonsoft.Json.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net.Http" #>
<#@ import namespace="System.Runtime.InteropServices.ComTypes" #>
<#@ import namespace="System.Security" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="Microsoft.CSharp" #>



<#@ output extension=".cs" #>
<# 
    var path = Host.ResolvePath("");
    var swaggerApiProxySettings = Settings.GetSettings(path);

	// using directives
	PrintHeaders();
    foreach (var endPoint in swaggerApiProxySettings.EndPoints)
    {
        var httpClient = new HttpClient();
        string result;
        string methodNameAppend = string.Empty;
        if (endPoint.AppendAsyncToMethodName)
        {
            methodNameAppend = "Async";
        }
		try
        {
			result = httpClient.GetStringAsync(endPoint.Url).Result;
			var parser = new SwaggerParser();
			var proxyDefinition = parser.ParseSwaggerDoc(result, endPoint.ParseOperationIdForProxyName);

       
			
			
			WriteLine("namespace {0}{{", endPoint.Namespace);



			var proxies = proxyDefinition.Operations.Select(i=>i.ProxyName).Distinct();
			foreach (var proxy in proxies)
			{
				// start class defintion
				WriteLine("/// <summary>");
				WriteLine("/// Web Proxy for {0}", proxy);
				WriteLine("/// </summary>");
				WriteLine("public class {0} : {1}", FixTypeName(proxy) + "WebProxy", endPoint.BaseProxyClass);
				WriteLine("{");

				WriteLine("public {0}{1}", FixTypeName(proxy) + "WebProxy", endPoint.ProxyConstructorSuffix);
				WriteLine("{}");
		
				#>
					// helper function for building uris. 
					private string AppendQuery(string currentUrl, string paramName, string value)
					{
						if (currentUrl.Contains("?"))
							currentUrl += string.Format("&{0}={1}", paramName, Uri.EscapeUriString(value));
						else
							currentUrl += string.Format("?{0}={1}", paramName, Uri.EscapeUriString(value));
						return currentUrl;
					}
				<#

				List<Enum> proxyParamEnums = new List<Enum>();

				// Async operations (web methods)
				foreach (var operationDef in proxyDefinition.Operations.Where(i=>i.ProxyName.Equals(proxy))) {
					string returnType = string.IsNullOrEmpty(operationDef.ReturnType) ? string.Empty : string.Format("<{0}>", operationDef.ReturnType);
					var enums = operationDef.Parameters.Where(i => i.Type.EnumValues != null);
				    if (enums != null)
				    {
				        foreach (var enumParam in enums)
				        {
				            enumParam.Type.TypeName = operationDef.OperationId + enumParam.Type.Name;
				            proxyParamEnums.Add(new Enum()
				            {
								Name = enumParam.Type.TypeName,
								Values = enumParam.Type.EnumValues
				            });
				        }
				    }

					string parameters = string.Join(", ", operationDef.Parameters
									.OrderByDescending(i=>i.IsRequired).Select(
										x => (x.IsRequired == false) ?
										 string.Format("{0} {1} = {2}", GetDefaultType(x), x.Type.GetCleanTypeName(), GetDefaultValue(x)) 
										 :  string.Format("{0} {1}", x.Type.TypeName, x.Type.GetCleanTypeName())));
										 
					WriteLine("/// <summary>");
					WriteLine("/// {0}", (SecurityElement.Escape(operationDef.Description) ?? "").Replace("\n", "\n///"));
				    WriteLine("/// </summary>");
					foreach (var parameter in operationDef.Parameters)
					{
						WriteLine("/// <param name=\"{0}\">{1}</param>", parameter.Type.Name, (SecurityElement.Escape(parameter.Description) ?? "").Replace("\n", "\n///"));
					}
					
					WriteLine("public async Task{0} {1}{2} ({3})", returnType, FixTypeName(operationDef.OperationId), methodNameAppend, parameters);
					WriteLine("{");

				    if (operationDef.Path.StartsWith("/"))
				        Write("var url = \"{0}\"", operationDef.Path.Substring(1));
				    else
				        Write("var url = \"{0}\"", operationDef.Path);

					foreach (var parameter in operationDef.Parameters.Where(i=>i.ParameterIn == ParameterIn.Path))
					{
						WriteLine("");
						Write("\t.Replace(\"{{{0}}}\", {0}.ToString())", parameter.Type.GetCleanTypeName());
					}
					WriteLine(";");

				    var queryParams = operationDef.Parameters.Where(i => i.ParameterIn == ParameterIn.Query).ToList();
				    if (queryParams != null && queryParams.Count > 0)
				    {
						foreach (var parameter in queryParams)
						{						
							if (parameter.IsRequired == false)
						    {
						        WriteNullIfStatementOpening(parameter.Type.GetCleanTypeName(), parameter.Type.TypeName);
						    }

						    if (string.IsNullOrWhiteSpace(parameter.CollectionFormat) == false)
						    {
								// array
								if (parameter.CollectionFormat.Equals("csv", StringComparison.OrdinalIgnoreCase))
						        {
						            WriteLine("url = AppendQuery(url, \"{0}\", string.Join(\",\", {1}));", parameter.Type.Name, parameter.Type.GetCleanTypeName());
						        }
						        else if (parameter.CollectionFormat.Equals("ssv", StringComparison.OrdinalIgnoreCase))
						        {
						            WriteLine("url = AppendQuery(url, \"{0}\", string.Join(\" \", {1}));", parameter.Type.Name, parameter.Type.GetCleanTypeName());
						        }
								else if (parameter.CollectionFormat.Equals("tsv", StringComparison.OrdinalIgnoreCase))
						        {
						            WriteLine("url = AppendQuery(url, \"{0}\", string.Join(\"\t\", {1}));", parameter.Type.Name, parameter.Type.GetCleanTypeName());
						        }
								else if (parameter.CollectionFormat.Equals("pipes", StringComparison.OrdinalIgnoreCase))
						        {
						            WriteLine("url = AppendQuery(url, \"{0}\", string.Join(\"\t\", {1}));", parameter.Type.Name, parameter.Type.GetCleanTypeName());
						        }
								else if (parameter.CollectionFormat.Equals("multi", StringComparison.OrdinalIgnoreCase))
								{
								    WriteLine("foreach(var item in {0})", parameter.Type.GetCleanTypeName());
								    WriteLine("{");
								    WriteLine("url = AppendQuery(url, \"{0}\", item.ToString());", parameter.Type.Name);
								    WriteLine("}");
								}
								else
								{
									Warning("unknown collection format found");
								    WriteLine("url = AppendQuery(url, \"{0}\", {1}.ToString());", parameter.Type.Name, parameter.Type.GetCleanTypeName());
								}
						    }
						    else
						    {
								WriteLine("url = AppendQuery(url, \"{0}\", {1}.ToString());", parameter.Type.Name, parameter.Type.GetCleanTypeName());    
						    }

						    
							if (parameter.IsRequired == false)
						    {
						        WriteLine("}");
						    }
						}						
				    }
					

					WriteLine("");
					WriteLine("using (var client = BuildHttpClient())");
					WriteLine("{");
					switch (operationDef.Method.ToUpperInvariant())
					{
						case "GET": 
							WriteLine("var response = await client.GetAsync(url).ConfigureAwait(false);");
							break;

						case "DELETE":
							WriteLine("var response = await client.DeleteAsync(url).ConfigureAwait(false);");
							break;

						case "PUT":
							var putBodyParam = operationDef.Parameters.FirstOrDefault(i => i.ParameterIn == ParameterIn.Body);
							if (putBodyParam != null)
							{
								WriteLine("var response = await client.PutAsJsonAsync(url, {0}).ConfigureAwait(false);", putBodyParam.Type.Name);   
							}
							else if (operationDef.Parameters.Any(i => i.ParameterIn == ParameterIn.FormData))
							{
							    var formData = operationDef.Parameters.Where(i => i.ParameterIn == ParameterIn.FormData).ToList();
							    WriteLine("var formKeyValuePairs = new List<KeyValuePair<string, string>>();");
							    foreach (var formParam in formData.Where(x => x.Type.TypeName != "file"))
							    {
							        if (formParam.IsRequired == false)
							        {
							            WriteNullIfStatementOpening(formParam.Type.Name, formParam.Type.TypeName);
							        }
							        WriteLine("formKeyValuePairs.Add(new KeyValuePair<string, string>(\"{0}\", {0}));", formParam.Type.Name);
									if (formParam.IsRequired == false)
							        {
							            WriteLine("}");
							        }
							    }
							    foreach (var formParam in formData.Where(x => x.Type.TypeName == "file"))
							    {
							        WriteLine("var fileContent = new ByteArrayContent({0}.Item1);", formParam.Type.Name);
							        WriteLine("fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue(\"attachment\") { FileName = \"{0}.Item2\" };", formParam.Type.Name);
							    }
							    WriteLine("HttpContent content = new FormUrlEncodedContent(formKeyValuePairs);");
							    WriteLine("var response = await client.PutAsync(url, content).ConfigureAwait(false);");								
							}
							else
							{
								WriteLine("var response = await client.PutAsync(url, new StringContent(string.Empty)).ConfigureAwait(false);");    
							}

							break;

						case "POST":
							var postBodyParam = operationDef.Parameters.FirstOrDefault(i => i.ParameterIn == ParameterIn.Body);
							if (postBodyParam != null)
							{
								WriteLine("var response = await client.PostAsJsonAsync(url, {0}).ConfigureAwait(false);", postBodyParam.Type.Name);   
							}
							else if (operationDef.Parameters.Any(i => i.ParameterIn == ParameterIn.FormData))
							{
							    var formData = operationDef.Parameters.Where(i => i.ParameterIn == ParameterIn.FormData).ToList();
							    WriteLine("var formKeyValuePairs = new List<KeyValuePair<string, string>>();");
							    foreach (var formParam in formData.Where(x => x.Type.TypeName != "file"))
							    {
							        if (formParam.IsRequired == false)
							        {
							            WriteNullIfStatementOpening(formParam.Type.Name, formParam.Type.TypeName);
							        }
							        WriteLine("formKeyValuePairs.Add(new KeyValuePair<string, string>(\"{0}\", {0}));", formParam.Type.Name);
									if (formParam.IsRequired == false)
							        {
							            WriteLine("}");
							        }
							    }
								foreach (var formParam in formData.Where(x => x.Type.TypeName == "file"))
							    {
							        WriteLine("var {0}Content = new ByteArrayContent({0}.Item2);", formParam.Type.Name);
							        WriteLine("{0}Content.Headers.ContentDisposition = new ContentDispositionHeaderValue(\"attachment\") {{ FileName = {0}.Item1 }};", formParam.Type.Name);
							    }
							    WriteLine("HttpContent content = new FormUrlEncodedContent(formKeyValuePairs);");
							    WriteLine("var response = await client.PostAsync(url, content).ConfigureAwait(false);");								
							}
							else
							{
								WriteLine("var response = await client.PostAsync(url, new StringContent(string.Empty)).ConfigureAwait(false);");    
							}
						
							break;

						default:
							break;
					}
					WriteLine("await EnsureSuccessStatusCodeAsync(response);");

					if (string.IsNullOrWhiteSpace(operationDef.ReturnType) == false)
					{
						WriteLine("return await response.Content.ReadAsAsync<{0}>().ConfigureAwait(false);", operationDef.ReturnType);
					}

					WriteLine("}");	 // close up the using
					WriteLine("}");	 // close up the method
				}

				
				foreach (var proxyParamEnum in proxyParamEnums)
			    {
			        WriteLine("public enum {0}", FixTypeName(proxyParamEnum.Name));
					WriteLine("{");
			        foreach (var value in proxyParamEnum.Values.Distinct())
			        {
			            WriteLine("{0},", FixTypeName(value));
			        }
					WriteLine("}");
			    }

				// close class def
				WriteLine("}");
			}

			// Model Classes
			foreach (var classDef in proxyDefinition.ClassDefinitions) 
			{			
				List<Enum> modelEnums = new List<Enum>();
			
				WriteLine("public class {0} {1}", classDef.Name, string.IsNullOrEmpty(classDef.Inherits) ? string.Empty : string.Format(": {0}", classDef.Inherits));
				WriteLine("{");;
				foreach(var prop in classDef.Properties) {
					WriteLine("public {0} {1} {{ get; set; }}", prop.TypeName, prop.Name);
				    if (prop.EnumValues != null)
				    {
				        modelEnums.Add(new Enum()
				        {
				            Name = prop.TypeName,
							Values = prop.EnumValues
				        });
				    }
				}

				foreach (var modelEnum in modelEnums)
			    {
					var csharpCodeProvider = new CSharpCodeProvider();
			        WriteLine("public enum {0}", csharpCodeProvider.CreateValidIdentifier(modelEnum.Name));
					WriteLine("{");
			        foreach (var value in modelEnum.Values.Distinct())
			        {
			            WriteLine("{0},", FixTypeName(value));
			        }
					WriteLine("}");
			    }

				WriteLine("}");
			}



			// close namespace def
			WriteLine("}");
        }
        catch (Exception ex)
        {
            this.Error(ex.ToString());
        }

    }
    #>        

    <#+

	string GetDefaultType(Parameter x)
	{
	    var typeName = x.Type.TypeName;
	    if (typeName == "file")
	    {
	        return "Tuple<string, byte[]>";
	    }

	    if (x.Type.IsNullableType)
	        typeName += "?";

	    var output = x.CollectionFormat == "multi" ? string.Format("List<{0}>", typeName) : typeName;
	    return output;
	}

    string GetDefaultValue(Parameter x)
    {
        if (!x.Type.IsNullableType && x.CollectionFormat != "multi" && x.Type.EnumValues != null && x.Type.EnumValues.Any())
        {
            return string.Format("{0}.{1}", x.Type.TypeName, x.Type.EnumValues.FirstOrDefault());
        }

        return "null";
    }

    void PrintHeaders()
    {
        WriteLine("using System;");;
        WriteLine("using System.Collections.Generic;");
		WriteLine("using System.Threading.Tasks;");
		WriteLine("using System.Net.Http;");
		WriteLine("using System.Net.Http.Headers;");
		WriteLine("");
		WriteLine("// ReSharper disable All");
		WriteLine("");
    }

    void WriteNullIfStatementOpening(string parameterName, string typeName)
    {
        if (IsIntrinsicType(typeName))
        {
            WriteLine("if ({0}.HasValue){{", parameterName);
        }
        else
        {
            WriteLine("if ({0} != null){{", parameterName);
        }
    }

	static bool IsIntrinsicType(string typeName)
    {
        switch (typeName.ToLowerInvariant())
        {
			case "int":
			case "long":
			case "byte":
			case "DateTime":
			case "float":
			case "double":
                return true;
			default:
                return false;
        }
    }

    void PrintDescription(ProxyDefinition proxyDefinition)
    {
		WriteLine("// {0}", proxyDefinition.Title);
        WriteLine("// {0}", proxyDefinition.Description);
		WriteLine("// Generated at {0}", DateTime.Now);
    }

    internal static string FixTypeName(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

	    //var csharpCodeProvider = new CSharpCodeProvider();
        var output = input.Replace(" ", "");
        output = SwaggerParser.FixGenericName(output);

        if (char.IsLetter(output[0]) == false)
            output = "_" + output;

        return output;
    }

    public static class Settings
    {
        public static SwaggerApiProxySettings GetSettings(string path)
        {
            using (var settingStream = File.OpenRead(Path.Combine(path, "SwaggerApiProxy.tt.settings.xml")))
            {
                var serializer = new XmlSerializer(typeof(SwaggerApiProxySettings));
                return (SwaggerApiProxySettings)serializer.Deserialize(settingStream);
            }
        }
    }

    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public partial class SwaggerApiProxySettings
    {
        [XmlArrayItem("EndPoint", IsNullable = false)]
        public SwaggerApiProxySettingsEndPoint[] EndPoints { get; set; }
    }

    [XmlType(AnonymousType = true)]
    public partial class SwaggerApiProxySettingsEndPoint
    {
		public string Id { get; set; }
        public string Url { get; set; }
        public string Namespace { get; set; }
        public string Suffix { get; set; }
        public string BaseProxyClass { get; set; }
		public string ProxyConstructorSuffix { get; set; }
		public bool ParseOperationIdForProxyName { get; set; }
		public bool AppendAsyncToMethodName { get; set; }
    }

    private class Enum
    {
		public string Name { get; set; }
		public string[] Values { get; set; }
    }

    public class SwaggerParser
    {
        public ProxyDefinition ParseSwaggerDoc(string document, bool parseOperationIdForProxyName)
        {
			var jObject = JObject.Parse(document);

            var proxyDefinition = new ProxyDefinition();

            var infoToken = jObject["info"];
            proxyDefinition.Title = infoToken["title"].ToString();
            var descriptionToken = infoToken["description"];
            proxyDefinition.Description = descriptionToken != null ? descriptionToken.ToString() : null;

            this.ParsePaths(jObject, proxyDefinition, parseOperationIdForProxyName);
            this.ParseDefinitions(jObject, proxyDefinition);
			
            return proxyDefinition;
        }

        private void ParsePaths(JObject jObject, ProxyDefinition proxyDefinition, bool parseOperationIdForProxyName)
        {
            foreach (var pathToken in jObject["paths"].Cast<JProperty>())
            {
                var path = pathToken.Name;
                foreach (var operationToken in pathToken.First.Cast<JProperty>())
                {
                    var proxyName = string.Empty;
                    var method = operationToken.Name;
                    var operationId = operationToken.First["operationId"].ToString();

                    if (parseOperationIdForProxyName)
                    {
                        if (operationId.Contains("_"))
                        {
                            var underscoreLocation = operationId.IndexOf("_", StringComparison.OrdinalIgnoreCase);
                            proxyName = operationId.Substring(0, underscoreLocation);
                            operationId = operationId.Substring(underscoreLocation + 1);
                        }
                    }

                    if (string.IsNullOrWhiteSpace(proxyName))
                    {
						// didn't get the proxy name from the operation id, let's try the tags
                        var tagToken = operationToken.First["tags"];
                        if (tagToken != null)
                        {
                            var tags = tagToken.ToObject<List<string>>();
							proxyName = tags.First();
                        }
                    }

					var descriptionToken = operationToken.First["description"];
                    string description = null;
                    if (descriptionToken != null)
                    {
                        description = descriptionToken.ToString();
                    }

                    string returnType;
                    var schema = operationToken.First["responses"]["200"];
                    if (schema != null)
                    {
                        bool dummyNullable;
                        returnType = this.GetTypeName(schema, out dummyNullable);
                        if (returnType != null && returnType.Equals("Void"))
                            returnType = null;
                    }
                    else
                    {
                        returnType = null;
                    }

                    var parameters = new List<Parameter>();
                    var paramTokens = operationToken.First["parameters"];
                    if (paramTokens != null)
                    {
                        foreach (var prop in paramTokens)
                        {
                            var type = ParseType(prop);

							var isRequired = prop["required"].ToObject<bool>();

                            ParameterIn parameterIn;
                            if (prop["in"].ToString().Equals("path"))
                            {
                                parameterIn = ParameterIn.Path;
                            }
							else if (prop["in"].ToString().Equals("query"))
							{
							     parameterIn = ParameterIn.Query;
							}
							else if (prop["in"].ToString().Equals("formData"))
							{
							     parameterIn = ParameterIn.FormData;
							}
							else
							{
							    parameterIn = ParameterIn.Body;
							}

                            
							var propDescriptionToken = prop["description"];
                            string propDescription = string.Empty;
                            if (propDescriptionToken != null)
                            {
                                propDescription = propDescriptionToken.ToString();
                            }

                            string collectionFormat = string.Empty;
                            var collectionFormatToken = prop["collectionFormat"];
                            if (collectionFormatToken != null)
                            {
                                collectionFormat = collectionFormatToken.ToString();
                            }

                            parameters.Add(new Parameter(type, parameterIn, isRequired, propDescription, collectionFormat));
                        }
                    }
					
                    proxyDefinition.Operations.Add(new Operation(returnType, method, path, parameters, operationId, description, proxyName));
                }
            }
        }

        private void ParseDefinitions(JObject jObject, ProxyDefinition proxyDefinition)
        {
            foreach (var definitionToken in jObject["definitions"].Where(i => i.Type == JTokenType.Property).Cast<JProperty>())
            {
                bool addIt = true;
                var classDefinition = new ClassDefinition(definitionToken.Name);
                var allOf = definitionToken.First["allOf"];
                if (allOf != null)
                {
                    foreach (var itemToken in allOf)
                    {
                        var refType = itemToken["$ref"] as JValue;
                        if (refType != null)
                        {
                            classDefinition.Inherits = refType.Value.ToString();
                        }

                        var properties = itemToken["properties"];
                        if (properties != null)
                        {
                            foreach (var prop in properties)
                            {
                                var type = ParseType(prop);
                                classDefinition.Properties.Add(type);
                            }
                        }
                    }
                }
                else
                {
                    var properties = definitionToken.Value["properties"];
					if (properties != null)
                    {
                        foreach (var prop in properties)
						{
							var type = ParseType(prop);
							classDefinition.Properties.Add(type);
						}
                    }
					else
					{
					    addIt = false;
					}
                }

                
                classDefinition.Name = FixGenericName(classDefinition.Name);
                if (classDefinition.Name.Equals("Void", StringComparison.InvariantCulture))
                {
                    addIt = false;
                }

                if (addIt)
                {
                    proxyDefinition.ClassDefinitions.Add(classDefinition);
                }
            }
        }

        internal TypeDefinition ParseType(JToken token)
        {
            bool isNullable;
			JToken workingToken;
            string name;
			if (token.First is JProperty)
			{
			    workingToken = token;
				name = workingToken["name"].ToString();
			}
            else
			{
			    workingToken = token.First;
				name = ((JProperty)token).Name;
			}

			var typeName = GetTypeName(workingToken, out isNullable);
			var enumToken = workingToken["enum"];
            string[] enumValues = null;
            if (enumToken != null)
            {
                List<string> enumList = new List<string>();
                bool anyRawNumbers = false;

                foreach (var enumValueToken in enumToken)
                {
                    var enumValue = enumValueToken.ToString();
                    decimal value;
                    if (Decimal.TryParse(enumValue, out value))
                    {
                        anyRawNumbers = true;
                    }
                    enumList.Add(enumValue);
                }
                if (anyRawNumbers == false)
                {
					enumValues = enumList.ToArray();
					typeName = FixTypeName(name + "Values");    
                }                
            }

            typeName = FixGenericName(typeName);
			TypeDefinition type = new TypeDefinition(typeName, name, enumValues, isNullable);
            return type;
        }

        internal string ParseRef(string input)
        {
            return input.StartsWith("#/definitions/") ? input.Substring("#/definitions/".Length) : input;
        }


        public static string FixGenericName(string input)
        {
            if (input.Contains("[") == false || input.Contains("]") == false)
            {
                return input;
            }

            if (input.StartsWith("Dictionary[") || input.StartsWith("IDictionary["))
            {
                return input.Replace("[", "<").Replace("]", ">");
            }

            var firstBracket = input.IndexOf("[" , StringComparison.InvariantCulture) + 1;
			var secondBracket = input.IndexOf("]", StringComparison.InvariantCulture);
            string typeName = input.Substring(firstBracket, secondBracket - firstBracket);
            string genericName = input.Substring(0, firstBracket - 1);

			return typeName + genericName;
        }

        internal string GetTypeName(JToken token, out bool isNullable)
        {

            var refType = token["$ref"] as JValue;
            bool hasNullFlag = false;
            if (refType != null)
            {
                isNullable = false;
                return FixTypeName(this.ParseRef(refType.Value.ToString()));
            }

            var schema = token["schema"];
            if (schema != null)
            {
                return FixTypeName(this.GetTypeName(schema, out isNullable));
            }

            var type = token["type"] as JValue;
            if (type == null)
            {
                isNullable = false;
                return null;
            }

			var nullableToken = token["x-nullable"] as JValue;
            if (nullableToken != null)
            {
                hasNullFlag = true;
            }

			if (type.Value.Equals("array"))
            {
				isNullable = false;
                var jToken = token["items"];
                bool throwawayNullable; // we don't care what the underlying 
                return string.Format("List<{0}>", this.GetTypeName(jToken, out throwawayNullable));
            }
			if (type.Value.Equals("boolean"))
            {
                isNullable = true;
                return (hasNullFlag) ? "bool?" : "bool";
            }

            if (type.Value.Equals("file"))
            {
                isNullable = true;
                return "file";
            }
            if (type.Value.Equals("string"))
            {
                var format = token["format"] as JValue;
                if (format == null)
                {
                    isNullable = false;
                    return "string";
                }


                if (format.Value.Equals("date") || format.Value.Equals("date-time"))
                {
                    isNullable = true;
                    return (hasNullFlag) ? "DateTime?" : "DateTime";
                }

                if (format.Value.Equals("byte"))
                {
                    isNullable = true;
                    return (hasNullFlag) ? "byte?" : "byte";
                }

                isNullable = false;
                return "string";
            }

            if (type.Value.Equals("integer"))
            {
                isNullable = true;
                var format = token["format"] as JValue;
                if (format != null)
                {
                    if (format.Value.Equals("int32"))
                        return (hasNullFlag) ? "int?" : "int";


                    if (format.Value.Equals("int64"))
                        return (hasNullFlag) ? "long?" : "long";
                }

                return "int";
            }

            if (type.Value.Equals("number"))
            {
                isNullable = true;
                var format = token["format"] as JValue;
                if (format != null)
                {
                    if (format.Value.Equals("float"))
                        return (hasNullFlag) ? "float?" : "float";

                    if (format.Value.Equals("double"))
                        return (hasNullFlag) ? "double?" : "double";

                    if (format.Value.Equals("decimal"))
                        return (hasNullFlag) ? "decimal?" : "decimal";
                }
            }

            

            isNullable = false;
            return "";
        }
    }


    public class ClassDefinition
    {
        public ClassDefinition(string name)
        {
            this.Name = name;
            this.Properties = new List<TypeDefinition>();
        }

        public string Name { get; set; }
        public List<TypeDefinition> Properties { get; set; }
        public string Inherits { get; set; }
    }

    public class Operation
    {
        public Operation(string returnType, string method, string path, List<Parameter> parameters, string operationId, string description, string proxyName)
        {
            this.Path = path;
            this.Method = method;
            this.Parameters = parameters;
            this.OperationId = operationId;
            this.Description = description;
            this.ReturnType = returnType;
            this.ProxyName = proxyName;
        }

		public string ProxyName { get; set; }
        public string Path { get; set; }
        public string Method { get; set; }
        public List<Parameter> Parameters { get; set; }
        public string OperationId { get; set; }
        public string Description { get; set; }
        public string ReturnType { get; set; }
    }

    public class Parameter
    {
        public TypeDefinition Type { get; set; }
        public ParameterIn ParameterIn { get; set; }
        public bool IsRequired { get; set; }
		public string Description { get; set; }
		public string CollectionFormat { get; set; }

        public Parameter(TypeDefinition type, ParameterIn parameterIn, bool isRequired, string description, string collectionFormat)
        {
            this.Type = type;            
            this.ParameterIn = parameterIn;
            this.IsRequired = isRequired;
            this.Description = description;
            this.CollectionFormat = collectionFormat;
        }
    }

    public enum ParameterIn
    {
        Body,
        Path,
		Query,
		FormData
    }

    public class TypeDefinition
    {
        public TypeDefinition(string typeName, string name, string[] enumValues = null, bool isNullableType = false)
        {
            this.TypeName = typeName;
            this.Name = name;
            this.EnumValues = enumValues;
            this.IsNullableType = isNullableType;
        }

        public string Name { get; set; }
        public string TypeName { get; set; }
		public string[] EnumValues { get; set; }
		public bool IsNullableType { get; set; }

		public string GetCleanTypeName()
		{
			return Name.Replace("$", "");
		}
    }

    public class ProxyDefinition
    {
        public ProxyDefinition()
        {
            this.ClassDefinitions = new List<ClassDefinition>();
            this.Operations = new List<Operation>();
        }

        public string Title { get; set; }
        public string Version { get; set; }
        public string Description { get; set; }

        public List<ClassDefinition> ClassDefinitions { get; set; }
        public List<Operation> Operations { get; set; }
    }
    #>